#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$LOAD_PATH << File.dirname(__FILE__)+'/lib'
require 'webwalker'
require 'daemon_spawn'
require 'logger'
require 'fluent-logger'

command = ARGV.shift

# WebWalker.logger = Fluent::Logger::FluentLogger.open(nil, host:'localhost' )
WebWalker.logger = Fluent::Logger::ConsoleLogger.new(STDOUT)

case command
when 'list'
  puts WebWalker::Plugin.plugin_list.keys

when 'one'
  pp WebWalker::Handler.walk( ARGV[0], ARGV[1] ).result

when 'add'
  ARGV.each { |x| WebWalker::Handler.add_url WebWalker::Project.new(x), x }

when 'do_one'
  ARGV.each { |x| WebWalker::Handler.walk_one x.to_i }

when 'all'
  WebWalker::Handler.walk_around

when 'zip'
  ARGV.each do |x|
    proj = WebWalker::Project.find(x.to_i)
    puts proj.zip
  end

when 'daemon'   # daemon化する
  class WalkerDaemon < DaemonSpawn::Base
    def start( args )
      # PENDING
      WebWalker.logger = Fluent::Logger::FluentLogger.open('wwd', host:'localhost' ) 
      # WebWalker.logger = Fluent::Logger::NullLogger.open
      WebWalker.logger.post 'info', msg: 'start'
      begin
        while true
          WebWalker::Handler.walk_around
          sleep 1
        end
      rescue
        WebWalker.logger.post 'error', msg: $!.to_s, clazz: $!.class.to_s, backtrace: $!.backtrace
        puts $!, $!.backtrace
        sleep 60
      end
    end
    def stop
    end
  end

  WebWalker.logger.post 'info', msg: 'start'
  opt = { 
    log_file: '/var/walker/walker.log', 
    pid_file:'/var/walker/walker.pid', 
    sync_log: true,
    working_dir: File.dirname(__FILE__)
  }
  WalkerDaemon.spawn! opt, ARGV

when 'cron'
  WebWalker::Handler.cron

when nil
  puts "Usage: ww add|one|all|daemon"
else
  puts "unknown command #{command}"
  exit 1
end
